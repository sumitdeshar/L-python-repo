Django
Installing django:
pip install django
Creating Project:
django-admin startproject myproject
Creating myapp:
python manage.py startapp myapp

Run server:
python manage.py runserver // 4:11:20

URL routing:
1. Create new file 'urls.py'
In myapp/urls.py
2. import admin from django.contrib to access database and stuff
    import path from django.urls to access multiple path
    import views from . to access views.py file
3. create a list urlpatterns and add a path like
        path('', views.index, name="index")        // add path to the app basically connect diffent file
In myapp/views.py
4. import import HttpResponse from django.http
5. Define a function like
    def index(request):
            return HttpResponse('<h1>Welcome</h1>')    //display Welcome
In myproject/urls.py
6. import include from django.urls
7. add path like:
    path('', include('myapp.urls')) //to include myapp/urls.py to the project


Adding template:
1. Create a directory on the main directory 
In myproject/setting.py
2. add BASE_DIR, directory_name in templates section
3. create a index.html in templates directory

Sending Data To Template File:
In index.html
1.Create a static line
In myapp/views.py
2.Create a function 'index' //to change into a dyanmic  line
3.  def index(request):
    name='John'
    return render(request,'index.html', {'name': name})
5. Replace name = user.name // It will get name of the user through login
6.-adding context = //dictionary
    {
        'name': 'Haemon',
        'age': '21',
        'nationality': 'Nepali',
        'interest': 'valorant', 'minecraft','defenitely not studing'
    }
In index.html 
4. Replace static name with dyanmic as {{name}}// name is a key here
7. change html accordingly

Building a word counter:
In index.html
1.create a form using textarea (name='text') and input
    -attribute for form
    4. add method 
    5. set action as counter
In myapp/urls.py
2.add path('',views.counter,name='counter')
In myapp/viwes.py
3. create a function counter(request)
    text = request.GET['text']
    amount_of_words = len(text.split())
    return render(request, 'counter.html', {'word_count': amount_of_words})
In counter.html
6. <h2>amount of words is {{word_count}}

GET vs POST: 
In GET ---> passed value is public and can be seen on url 
IN POST -->  passed value is private and cannot be seen on url 

Default is GET and for POST method:
-add this in the first line of code under POST section{% csrf_token %}
-change GET into POST in myapp.views.counter 

Static Files:
1. Create a new folder
In myproject/setting.py
2. import os 
3. STATICFILES_DIRS = (os.path.join(BASE_DIR,'static'),)
4. Create a css file and link to html in static dir 
    -implement under href="{% static 'file_name.css' %}"
    -load static as {% load static %}

Model in Django:
It is a database and we transfer data through here to data base using CharField
In myapp/model.py
1. Create a class feature as
    class Feature:
    id: int
    name: str 
    details: str
    is_true: bool 

In myapp/views.py
2. import Feature as
    from .models import Feature
3. create different feature 1(fast) 2(easy to use) 3(reliable)
    return Feature
4. implement it in html
//but dont follow 3 and 4 
5. create feature list and pass list in return
In html
    //applying loop in html
    {% for feature in features %}
        <div class="col-md-6 col-lg-3 d-flex align-items-stretch mb-5 mb-lg-0" data-aos="zoom-in" data-aos-delay="200">
          <div class="icon-box">
            <div class="icon"><i class="ri-stack-line"></i></div>
            <h4 class="title"><a href="">{{feature.name}}</a></h4>
            <p class="description">{{feature.details}}</p>
            {% if feature.is_true == True %}
              <p>This feature is true</p>
            {% {% elif  feature.is_true == False %} %}
              <p>This feature is false</p>
            {% endif %}
          </div>
        </div>
    {% endfor %}

Django Admin Panel:
In myapp/models.py 
1.pass parameter models.Model in class
//It convert the class into model or object
    -delete id //the object auto gets the ID in Default 
    -name= models.CharField(max_length= 100) // to add data on databases
    -details= models.CharField(max_length= 500)
In myproject/setting.py
2. add my on list INSTALLED_APPS
In cmd
3. python manage.py makemigrations// fo this every time you change something in model.py 
4. python manage.py migrate
5. python manage.py createsuperuser
6. try logging into the admin page

Manipulating database through admin webpage
In myapp/admin.py
1. from .models import Feature
2. add admin.site.register(Feature)
3. Go to page and hit refresh
4. add some object/features
5. to view the features add a return funtion in view.py/index function
    -features = Feature.objects.all()
6. add different features

User Resgisteration: 
1. Add a new path register
2. def a register function and return register.html
3. create a form in register.html
4. dont forget to add csrf_token
5. from django.contrib.auth.models import User, auth
6. import redirect from django.shortcuts
7. from django.contrib.authmodels import User, auth
8. import feature from .models
9. import messages from django.contrib
9. collect username ,email password and password2 as:
    username = request.POST["username"]
    email = request.Post["email"]
    password = request.Post["password"]
    password2 = request.Post["password2"]
10. if password==password2 then check username and email already exists if all is fine then create a user
11. else redirect the user to sign up page
12. add messages in register.html usign for loop 
13. give red color to the message

sample function:
    def register(request):
        if request.method == 'POST':
            username = request.POST["username"]
            email = request.Post["email"]
            password = request.Post["password"]
            password2 = request.Post["password2"]
            
            if password==password2:
                if User.obects.filter(email=email).exists():
                    messages.info(request, "Email Already Used")
                    return redirect('register')
                elif User.object.filter(username=username).exists():
                    messages.info(request, "Username Already Used")
                    return redirect('register')
                else:
                    user = User.objects.create_user(username=username, email=email, password=password)
                    user.save();
                    return redirect('login')
            else:
                messages.info(request, "Password did not match")
                return redirect('register')
        else:    
            return render(request,'register.html')

User Login:
1. Add path name login
2. create a login funtion returning login.html
3. create login.html
    -add a form with attributes action="login" method="POST"
    -add input tags for username and password
4. inside login funtion
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']

        user = auth.authenticate(username= usernmae, password= password)

        if user is not None:
            auth.login(request, user)
            return redirect('/')
        else:
            messages.info(request, "Credentials Invalid")
            return redirect ('login')
    else:
        return render(request,'login.html')

5. add a error message in html
{% for message in messages %}
<h3>{{message}}</h3>
{% endfor %} 

6. add a style
<style>
    h3{
        color: red;
    }
</style>

7. index.html line 90
{% if user.is_authenticated %}
    <h1>Welcome, {{ user.username }}</h1>
{% endif %}

8.for Logout
{% if user.is_authenticated %}
    <li><a class="getstarted scrollto" href="#about">Logout</a></li>
{% else %}
    <li><a class="getstarted scrollto" href="#about">Log In or SignUp</a></li>
{% endif %}

Dynamic url routing:
1.add path as
    path('post/<str:pk>',views.post, name='post')
In views.py
2.define a funtion post(request, pk):
return render(request, 'post.html',{'pk': pk})
for multiple post links
    call value for posts
    in post function
3.create a poster.html and add a dynamic text.
    -create a for loop
    -add a link tag
    - endfor

Postgresql:
connecting another database in django
-download postgresql for web
//skipped watch video if needed



Building a blog:
1. create a project blog
2. create a app posts
3. continue wiht url mapping
4. add path for index
5. create a views funtion
6. setup a template as
    BASE_DIR/'templates'
7. add app in INSTALLED_APPS
8. add a path on project urls//import include
9. create a model Post(model.models):
    title = models.CharField(max_length=100)
    body = models.CharField(max_length=1000)
    created_at = models>DateTimeField(default=datetime.now, blank=True) // import datetime from datetime
10. migrate above model
11. login to admin Panel
In admin.py
12. import Post form .models
13. admin.site.register(Post)
In views.py
14. get posts = Post.objects.all() and pass into html as posts
15. create a loop in html file and use reversed for LIOT(Last In On Top)
Change the post to shown few word than menu
16. use truncatewords:20
17. add a link tag with href for redirecting
18. add text-decoration: none and color: black
for redirecting post
19. create a new path for post
20. define a function post
21. create posts.html
22. create a dynamic url routing for post 

Errors:
It is impossible to add a non-nullable field 'room' to message without specifying a default.
This is because the database needs something to populate existing rows.

0. Choose option 2 and pass some values 

1. Adding 'null = True' to the new field.
Code:


p_4 = models.CharField(max_length=300, null=True) #new field


Now we can migrate the models, and the issue will be solved.

2. Adding 'default = " " ' to new filed.
Code:


p_6 = models.CharField(max_length=300, default='test') # default value

If these two ways does not working, can try :

3. Deleting and returning the model --highly risky-- db sab udcha
Before talking about this way, I'd to warn you that this way will delete your model data.
so you need to delete your model class in models.py then migrate your app models, after migrations return back the model and migrate the model

Delete Model => Makemigrations Models => Migrate Models => Return Back the models => Makemigrations Models => Migrate Models

Models:
-(advance database notes)

    class Tag (models.Model):
        name= models.CharField(max_length= 100)
        def __str__(self):
            return self.name

    class Product(models.Model):
        name= models.CharField(max_length= 100)
        context = models.CharField(max_length= 500)
        date_created = models.DateTimeField(auto_now_add=True, null=True)
        def __str__(self):
            return self.name

    class Order(models.Model):
    Status = (
        ('Pending','Pending'),
        ('Out for delivery','Out for delivery'),
        ('Delivered','Delivered'),
        )

        name= models.CharField(max_length= 100)
        context = models.CharField(max_length= 500)
        status = models.CharField(max_length=200, null=True, choices=Status)
        tags = models.ManyToManyField(Tag)
        def __str__(self):
            return self.name

Model query:
documentation for query: docs.djangoproject.com/en/2.2/ref/models/querysets/

customer=Customer.objects.get(id=2)
customer.order_set.all()
-->filter all order from customer without using filter

product = Product.object.filter(category='Out Door')
products = Products.objects.all().order_by('id')//here arrangemnet of data by id
products = Products.objects.all().order_by('-id')//here arrangemnet of data by -id or reversed

product1 = Product.objects.filter(tags__name="Sports") // __ because of many to many
--> filter all the product with tag name Sports
// we use tag instead of Tag because object for that class TAG is stored in tag

Model Forms:
In template/.html
1.Create a html form as:
    <form action="" method="POST">
        {%csrf_token%}
        {{form}}
        <input type="submit" name="submit">
    </form>
In mainapp/forms.py
2. Create a model for the desired object
3. Create a form as
    from django import forms
    from .models import *

    class EventForm(forms.ModelForm):
        class Meta:
            model = Order //model name for the one you want to create a form
            fields = '__all__' //what column name you want in forms
In urls.py
4. Create a urls 
In views.py
5. create a funciton for inputing and processing forms as:
    def createOrder(request):
        form =OrderForm()
        if request.method == 'POST':
            form = OrderForm(request.POST)
            if form.is_valid():
                form.save()
                return redirect('/')
    context = {'form': form}
    return render{request, '.html', context}